Credit Fraud Detection System
A Machine Learning project built to detect fraudulent credit card or loan transactions using Python. Designed with fintech platforms like Lendsqr in mind to help prevent financial loss and abuse.

Features
Detects fraudulent transactions with high accuracy using Random Forest.

Handles imbalanced datasets with SMOTE for better learning.

Clean, user-friendly Streamlit GUI for quick testing and predictions.

Modular design: separate scripts for training and prediction.

Easy to extend with API or additional ML models.

Project Structure
graphql
Copy
Edit
credit-fraud-detector/
├── data/                  # Raw dataset files (e.g. creditcard.csv)
├── models/                # Trained ML model saved as model.pkl
├── train_model.py         # Code for data preprocessing and training the model
├── app.py                 # Streamlit GUI for loading the model and making predictions
├── README.md              # Project overview and instructions (this file)
└── requirements.txt       # Python dependencies and versions
└── api.py                 # api for loading model and making prediction

Setup Instructions
Clone the repository:

bash
Copy
Edit
git clone <your-repo-url>
cd credit-fraud-detector


About the Dataset
This project uses the popular Credit Card Fraud Detection dataset from Kaggle. The data consists of anonymized transaction features (V1 to V28), transaction amount, and a class label indicating fraud or legitimate transaction.

How it Works
The model is trained with a Random Forest Classifier.

Imbalanced classes handled using SMOTE oversampling.

After training, the model is saved as models/model.pkl.

The Streamlit GUI loads this model and allows manual input of transaction features.

The model predicts and displays whether the transaction is fraudulent, with confidence scores.

Future Work
Connect GUI to REST API for scalable deployment.

Add more ML models for comparison.

Integrate real-time transaction monitoring systems.

Include user authentication for secure access.

Author
Scofield — Computer Science Student | Aspiring Cybersecurity Expert | AI & ML Enthusiast